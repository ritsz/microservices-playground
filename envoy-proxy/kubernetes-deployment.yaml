
apiVersion: v1
kind: Service
metadata:
  name: frontend-proxy
spec:
  selector:
    app: frontend-proxy-label
  ports:
    - name: load-balancer
      protocol: TCP
      port: 8080
      targetPort: 8080
    - name: admin
      protocol: TCP
      port: 9901
      targetPort: 9901
---

apiVersion: v1
kind: Service
metadata:
  name: film-service
spec:
  selector:
    app: film-service-label
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000
---

apiVersion: v1
kind: Service
metadata:
  name: rating-service
spec:
  selector:
    app: rating-service-label
  ports:
    - protocol: TCP
      port: 6000
      targetPort: 6000
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-proxy-deployment
  labels:
    app: frontend-proxy-label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend-proxy-label
  template:
    metadata:
      labels:
        app: frontend-proxy-label
    spec:
      containers:
      - name: frontend-proxy
        image: flask-microservices_frontend-proxy:latest
        ports:
        - containerPort: 8080
        - containerPort: 9901
        imagePullPolicy: IfNotPresent
        env:
        - name: SERVICE_NAME
          value: "frontend-proxy"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: film-service-deployment
  labels:
    app: film-service-label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: film-service-label
  template:
    metadata:
      labels:
        app: film-service-label
    spec:
      containers:
      - name: film-service
        image: flask-microservices_film-service:latest
        ports:
        - containerPort: 5000
        imagePullPolicy: IfNotPresent
        env:
        - name: SERVICE_NAME
          value: "film-service"
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: rating-service-deployment
  labels:
    app: rating-service-label
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rating-service-label
  template:
    metadata:
      labels:
        app: rating-service-label
    spec:
      containers:
      - name: rating-service
        image: flask-microservices_rating-service:latest
        ports:
        - containerPort: 6000
        imagePullPolicy: IfNotPresent
        env:
        - name: SERVICE_NAME
          value: "rating-service"
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-server-conf
  labels:
    name: prometheus-server-conf
data:
  prometheus.yml: |-
    global:
      scrape_interval: 5s
      evaluation_interval: 5s
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
        - targets:
          - 127.0.0.1:9090
      - job_name: 'frontend-proxy'
        metrics_path: '/stats/prometheus'
        scrape_interval: 5s
        static_configs:
        - targets: ['frontend-proxy:9901']
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  labels:
    app: prometheus-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
    spec:
      containers:
        - name: prometheus
          image: flask-microservices_prometheus
          args:
            - "--storage.tsdb.retention.time=12h"
            - "--config.file=/etc/prometheus/prometheus.yml"
          ports:
            - containerPort: 9090
          imagePullPolicy: IfNotPresent
          resources:
            requests:
              cpu: 500m
              memory: 500M
            limits:
              cpu: 1
              memory: 1Gi
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/
            - name: prometheus-storage-volume
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config-volume
          configMap:
            defaultMode: 420
            name: prometheus-server-conf

        - name: prometheus-storage-volume
          emptyDir: {}
