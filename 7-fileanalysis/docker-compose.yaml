version: '3.7'

x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2022-10-24T18-35-07Z
  command: server --console-address ":9001" http://minio1/data{1...2}
  expose:
    - "9000"
    - "9001"
  healthcheck:
    test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
    interval: 30s
    timeout: 20s
    retries: 3

services:
  frontend-proxy:
    image: frontend-proxy:latest
    build:
      context: Dockerfiles
      dockerfile: Dockerfile-envoyproxy
    ports:
    - "8080:8080"
    - "8443:8443"
    - "9901:9901"
    depends_on:
    - fileservice
    - analysisservice
  
  fileservice:
    image: file-server:latest
    hostname: fileservice
    restart: always
    depends_on:
      - postgres
      - nginx
    environment:
      - DATABASE_URL=postgres
      - DATABASE_USERNAME=postgres
      - DATABASE_PASSWORD=postgres
      - MINIO_URL=nginx
    healthcheck:
      test: curl --fail http://localhost:8080/actuator/health || exit 1
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s

  analysisservice:
    image: analysis-server:latest
    build:
      context: Dockerfiles
      dockerfile: Dockerfile-analysisservice
    hostname: analysisservice 
    depends_on:
      - kafka
      - connect
      - mongodb
    healthcheck:
      test: curl --fail http://localhost:9080/health || exit 1
      interval: 10s
      retries: 5
      start_period: 5s
      timeout: 10s
  
  postgres:
    image: debezium/postgres:12
    hostname: postgres
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '5432:5432'
    volumes:
      - /mnt/postgressdb:/var/lib/postgresql/data

  mongodb:
    image: mongo
    hostname: mongodb
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      PUID: 1000
      PGID: 1000

  nginx:
    image: nginx:1.19.2-alpine
    hostname: nginx
    volumes:
      - /mnt/conf/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    depends_on:
      - minio1
  
  minio1:
    <<: *minio-common
    hostname: minio1
    volumes:
      - /mnt/data-1:/data1
      - /mnt/data-2:/data2

  connect:
    image: debezium/connect:1.1
    hostname: connect
    ports:
     - 8083:8083
    links:
     - kafka
     - postgres
    depends_on:
     - kafka
    environment:
     - BOOTSTRAP_SERVERS=kafka:9092
     - GROUP_ID=sde_group
     - CONFIG_STORAGE_TOPIC=connect_storage_topic
     - OFFSET_STORAGE_TOPIC=connect_offset_topic
     - STATUS_STORAGE_TOPIC=connect_status_topic
  
  kafka:
    image: debezium/kafka:1.1
    hostname: kafka
    ports:
     - 9092:9092
    depends_on:
     - zookeeper
    environment:
     - ZOOKEEPER_CONNECT=zookeeper:2181

  zookeeper:
    image: debezium/zookeeper:1.1
    hostname: zookeeper
    ports:
     - 2181:2181
     - 2888:2888
     - 3888:3888
  
  prometheus:
    build:
      context: Dockerfiles
      dockerfile: Dockerfile-prometheus
    command: --config.file=/prometheus/prometheus.yaml --log.level=debug
    ports:
    - 9090:9090
    depends_on:
    - frontend-proxy

  grafana:
    image: grafana/grafana:latest
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning/datasources/:/etc/grafana/provisioning/datasources/
    env_file:
      - .config/grafana/config.monitoring

volumes:
  data1-1:
  data1-2:
  data2-1:
  data2-2:
  data3-1:
  data3-2:
  data4-1:
  data4-2:
  grafana_data: {}

